# This workflow deploys a PostgreSQL database to an EC2 instance using Docker Compose.
# It also tests the PostgreSQL connection to ensure successful deployment.
name: Docker CD Database Pipeline

on:
  push:
    # Trigger the workflow on push to the specified files.
    paths:
      - '.github/workflows/deployDB.yml'
      - 'deliverables/yres_scheduler/yres_scheduler_database/yres_schema.sql'

jobs:
  transfer-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Transfer code to EC2 instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: . 
          target: /home/ubuntu/yres/database

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Change directory to the database directory.
            cd /home/ubuntu/yres/database/deliverables/yres_scheduler/yres_scheduler_database/
            # Stop and remove any existing Docker containers.
            sudo docker-compose down --volumes --remove-orphans || true
            # Start the Docker Compose stack in detached mode.
            sudo docker-compose up -d

      - name: Wait for Deployment to Complete
        # Wait for 3 seconds to allow the deployment to complete.
        run: sleep 3s

      - name: Test PostgreSQL Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Replace the following with your PostgreSQL connection parameters.
            PSQL_HOST=ec2-18-218-217-198.us-east-2.compute.amazonaws.com
            PSQL_PORT=5432
            PSQL_USER=yres
            PSQL_DB=yres_db

            # Test the PostgreSQL connection.
            if PGPASSWORD=${{ secrets.PG_PASSWORD }} psql -h $PSQL_HOST -p $PSQL_PORT -U $PSQL_USER -d $PSQL_DB -c "SELECT 1"; then
              echo "PostgreSQL connection successful!"
            else
              echo "PostgreSQL connection failed."
              exit 1
            fi
